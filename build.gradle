buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'
        springCloudVersion = 'Finchley.M9'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://maven.eveoh.nl/content/repositories/releases"
        }

        maven { url 'https://repo.spring.io/libs-milestone' }

    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
    }
}

plugins {
    id "com.github.spotbugs" version "2.0.0"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'net.researchgate.release' version '2.8.0'
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'java'
apply plugin: 'jacoco'

apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-docker.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-info.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-commons.gradle'


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

project.ext {
    limits = [
            'instruction': 70,
            'branch'     : 55,
            'line'       : 75,
            'complexity' : 60,
            'method'     : 65,
            'class'      : 90
    ]
    isDebugMode = System.getProperty("DEBUG", "false") == "true"
    releaseMode = project.hasProperty("releaseMode")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url "http://jasperreports.sourceforge.net/maven2" }
    maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts" }
    maven { url "https://dl.bintray.com/michaelklishin/maven/" }

    maven { url 'https://repo.spring.io/libs-milestone' }

    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

dependencyManagement {
    imports {
        mavenBom "com.github.reportportal:commons-bom:0768166"
    }
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated/src/java/"
    }
}

compileGeneratedJava {
    classpath = configurations.compile
}
compileJava {
    source += sourceSets.generated.java
}

configurations {
    api
}

dependencies {
    if (releaseMode) {
        //compile 'com.epam.reportportal:commons-dao:4.0.0'
        implementation 'com.epam.reportportal:commons-rules:4.0.0'
        implementation 'com.epam.reportportal:commons-model:4.0.0'
        implementation 'com.epam.reportportal:commons:3.1.0'
    } else {
        implementation 'com.github.reportportal:commons-dao:9d48bcb7'
        implementation 'com.github.reportportal:commons-rules:5f5751'
        implementation 'com.github.reportportal:commons-model:5aef134b'
        implementation('com.github.reportportal:commons:71d4aca')
        implementation('com.github.reportportal:plugin-api:30f47d49')
    }

    //saucelabs

    implementation 'com.saucelabs:saucerest:1.0.40'

    //move this to the plugin-api
    implementation('com.atlassian.fugue:fugue:2.6.1')
    implementation('com.atlassian.jira:jira-rest-java-client-core:4.0.0')
    //*****************************

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'


    implementation 'org.apache.commons:commons-lang3:3.7'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.hibernate:hibernate-validator'
    implementation 'org.postgresql:postgresql'
    implementation 'org.jooq:jooq:3.11.4'
    implementation 'org.jooq:jooq-codegen:3.11.4'
    implementation 'org.jooq:jooq-meta:3.11.4'
    implementation 'org.jasypt:jasypt:1.9.2'
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    // Optional for spring-boot-starter-amqp
    implementation "com.rabbitmq:http-client:2.1.0.RELEASE"

    implementation 'commons-fileupload:commons-fileupload:1.3.3'
    implementation 'commons-validator:commons-validator:1.6'
    implementation 'org.slf4j:slf4j-api:1.7.24'

//    seaweedfs
    implementation 'org.lokra.seaweedfs:seaweedfs-client:0.7.3.RELEASE'
//    end of seaweedfs

    implementation "ch.qos.logback:logback-classic"
    implementation 'net.coobird:thumbnailator:0.4.8'
    implementation 'com.sun.mail:javax.mail'
    implementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.9'
    implementation group: 'org.aspectj', name: 'aspectjrt', version: '1.8.9'

//    compile 'org.springframework.cloud:spring-cloud-config-client'
    implementation 'org.springframework.retry:spring-retry'

//    compile 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

///// Security
    implementation 'org.springframework.cloud:spring-cloud-starter-security'
    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.security:spring-security-jwt'
    implementation 'org.springframework.security:spring-security-acl'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.6.2'

///// end of Security

    implementation 'org.apache.tika:tika-core'
    implementation 'org.apache.tika:tika-parsers'

    implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.7.0'

    //JasperReport's export to XLS uses Apache POI. Reports 6.3.1 needs version NOT
    //higher than 3.14 since 3.15 contains breaking API changes
    implementation group: 'org.apache.poi', name: 'poi', version: '3.17'

    implementation 'javax.inject:javax.inject:1'
    implementation 'com.github.spotbugs:spotbugs-annotations:3.1.12'

    implementation 'io.springfox:springfox-swagger-ui'
    implementation 'io.springfox:springfox-swagger2'

    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    implementation group: 'com.google.guava', name: 'guava', version: '25.1-jre'

    api 'org.jacoco:org.jacoco.agent:0.8.3'

    implementation "com.querydsl:querydsl-jpa:4.2.1"

//  Tests
    testCompile 'com.github.reportportal:agent-java-junit5:c6e131bdb2'

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.0'

    testCompile group: 'org.flywaydb.flyway-test-extensions', name: 'flyway-spring-test', version: '5.2.1'
    testCompile 'com.bitmechanic:dumbster:1.9.0.2'
}


wrapper {
    gradleVersion = '5.4.1'
}

/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//Start section for external jacoco test report
tasks.withType(JavaCompile) {
    if (isDebugMode) {
        options.debug = true
        options.compilerArgs = ["-g"]
    }
}

task copyJacocoAgentToLibs(type: Copy) {
    if (isDebugMode) {
        from {
            configurations.api.collect { zipTree(it) }
        }
        into "${project.buildDir}/libs/"
        include 'jacocoagent.jar'
    }
}

jar.dependsOn copyJacocoAgentToLibs
jar.dependsOn gitInfo
//End section for external jacoco test report

build.dependsOn jacocoTestReport

//task resolveDependencies() {
//    doLast {
//        project.rootProject.allprojects.each { subProject ->
//            subProject.buildscript.configurations.each { configuration ->
//                if (configuration.isCanBeResolved()) configuration.resolve()
//            }
//            subProject.configurations.each { configuration ->
//                if (configuration.isCanBeResolved()) configuration.resolve()
//            }
//        }
//    }
//}

bootJar {
    archiveName = "${baseName}.${extension}"
}

private static void copyFromUrl(GString localScriptPath, String scriptUrl) {
    def file = new File(localScriptPath)
    if (file.exists()) {
        file.delete()
    }
    file.getParentFile().mkdirs()
    file.createNewFile()
    file << new URL(scriptUrl).openStream()
}

task copyTestDatabaseScripts {
    def initScriptPath = "${projectDir}/src/test/resources/db/migration/V001__initialize_schema.sql"
    def initScriptUrl = "https://raw.githubusercontent.com/reportportal/migrations/master/migrations/1_initialize_schema.up.sql"
    copyFromUrl(initScriptPath, initScriptUrl)

    def dataScriptPath = "${projectDir}/src/test/resources/db/migration/V002__default_data.sql"
    def dataScriptUrl = "https://raw.githubusercontent.com/reportportal/migrations/master/migrations/3_default_data.up.sql"
    copyFromUrl(dataScriptPath, dataScriptUrl)
}

test.dependsOn copyTestDatabaseScripts

test {
    useJUnitPlatform()
//    systemProperty 'junit.jupiter.extensions.autodetection.enabled', true
    //    testLogging.showStandardStreams = true
    maxParallelForks = 1

    jacocoTestReport {
        reports {
            xml.enabled true
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/entity/**',
                                            '**/aop/**',
                                            '**/jasper/**',
                                            '**/configs/**',
                                            '**/demodata/**',
                                            '**/exception/**',
                                            '**/analyzer/model/**'
                ])
            })
        }
        doLast {
            def report = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
            logger.lifecycle("Checking coverage results: ${report}")

            def parser = new XmlParser()
            parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            def results = parser.parse(report)

            def percentage = {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }

            def counters = results.counter
            def metrics = [:]
            metrics << [
                    'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                    'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                    'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                    'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
                    'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                    'class'      : percentage(counters.find { (it.'@type' == 'CLASS') })
            ]


            def failures = []
            metrics.each {
                def limit = limits[it.key]
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
            }

            if (failures) {
                logger.quiet("------------------ Code Coverage Failed -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            } else {
                logger.quiet("Passed Code Coverage Checks")
            }
        }
    }

    if (System.env.TRAVIS == 'true') {
        minHeapSize = "128m"
        maxHeapSize = "1g"
    }
}

spotbugs {
    sourceSets = [sourceSets.main]
    reportLevel = "high"
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
